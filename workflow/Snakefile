import sys
import glob


class sample:
    def __init__(self, name, kit, fc, parent_exp, barcode=None):
        self.name = name
        self.kit = kit
        self.fc = fc
        self.parent_exp = parent_exp
        self.barcode = barcode

    def is_barcoded(self):
        if self.barcode is None:
            return False
        return True

    def is_direct_rna(self):
        if self.kit == 'SQK-RNA002':
            return True
        return False

    def is_unstranded(self):
        if self.kit in ['SQK-PCB111-24', 'SQK-PCS111']:
            return True
        return False


class experiment:
    def __init__(self, name, kit, fc, is_barcoded):
        self.name = name
        self.kit = kit
        self.fc = fc
        self.is_barcoded = is_barcoded


# Load config
if "--configfile" in sys.argv:
    i = sys.argv.index("--configfile")
    config_path = sys.argv[i + 1]
    configfile: config_path
else:
    config_path = "config/config.yml"
    configfile: config_path


# Set variables
SAMPLES_DIR = config['SAMPLES_DIR']
EXP_DIR = config['EXP_DIR']
DATA_DIR = config['DATA_DIR']
ANALYSIS_DIR = config['ANALYSIS_DIR']
IGV_DIR = config['IGV_DIR']
SHARE_DIR = config['SHARE_DIR']
ASSEMBLY = config['ASSEMBLY']
RSYNC_PATH = config['RSYNC_PATH']
SCRIPTS_DIR = config['SCRIPTS_DIR']
GENOME_FILE = os.path.join(DATA_DIR, ASSEMBLY, 'genome', 'genome.fa')
GTF_FILE = os.path.join(DATA_DIR, ASSEMBLY, 'genes.gtf')

# FLAIR variables
FLAIR_DIR = config['FLAIR_DIR']
FLAIR_RES = os.path.join(FLAIR_DIR, 'results')
FLAIR_METADATA = config['FLAIR_METADATA']

# Create a dictionary with samples and experiments.
samples = {}
experiments = {}
for d in config['SAMPLE_DATA']:
    s = sample(*d)
    samples[s.name] = s
    experiments[s.parent_exp] = experiment(s.parent_exp, s.kit, s.fc, s.is_barcoded())


##### include rules #####
include: "rules/get_data.smk"
include: "rules/flair.smk"
include: "rules/nanopolish.smk"


# Define rules that require minimal resources and can run on the same node where
# the actual snakemake is running
localrules: run_all, merge_fastqs, merge_fastqs_per_barcode, merge_logs,
            clean_guppy_logs, get_fastq_from_basecalling,
            symlink_alignments_for_igv, flair_make_metadata,
            flair_concatenate_bed_files, copy_fastqs_to_share,
            copy_bams_to_share


# Rule run_all collects all outputs to force execution of the whole pipeline.
rule run_all:
    input:
        # Alignments BAM/BAI files
        expand(
                SAMPLES_DIR + "/{s}/align/reads.{target}.sorted.{sufx}",
                s = samples.keys(),
                target = ['toGenome', 'toTranscriptome', 'toUCSCGenome'],
                sufx = ['bam', 'bam.bai']),
        # Flagstats
        expand(
            SAMPLES_DIR + "/{s}/align/reads.{target}.sorted.bam.flagstats.txt",
            s = samples.keys(),
            target = ['toGenome', 'toTranscriptome']),
        # Counts per transcript
        expand(
               ANALYSIS_DIR + "/counts/results/{s}/reads.toTranscriptome.counts.txt",
               s = samples.keys()),
        # Nanopolish polya for dRNA-Seq
        expand(
                ANALYSIS_DIR + "/polya/results/{s}/polya.filtered.tab",
                s = [s.name for s in samples.values() if s.is_direct_rna()]),
        # Flair
        FLAIR_RES + "/all/reads.isoforms.bed",
        FLAIR_RES + "/all/reads.flair.quantify",
        FLAIR_RES + "/all/reads.flair.diffexp/done",
        FLAIR_RES + "/all/reads.flair.diffsplice/diffsplice.alt3.events.quant.tsv",
        # Files for IGV
        expand(
                IGV_DIR + "/align/{s}-reads.{target}.sorted.{sufx}",
                s = samples.keys(),
                target = ['toGenome', 'toTranscriptome', 'toUCSCGenome'],
                sufx = ['bam', 'bam.bai']),
        # Files for sharing
        expand(
                SHARE_DIR + "/{s}-reads.{target}.sorted.{sufx}",
                s = samples.keys(),
                target = ['toUCSCGenome'],
                sufx = ['bam', 'bam.bai']),
        expand(
                SHARE_DIR + "/{s}-reads.fastq.gz",
                s = samples.keys()),
        # Run fastqc for quality control
        expand(
                SAMPLES_DIR + "/{s}/qc/reads_fastqc.html",
                s = samples.keys()),
        # Cleanup guppy files
        expand(
                EXP_DIR + "/{e}/guppy/clean_guppy_logs_done",
                e = experiments.keys()),


# guppy_barcode_options returns the additional options that are used in the
# guppy_basecaller to enable detection of barcodes.
def guppy_barcode_options(experiment):
    if experiment.is_barcoded:
        return '--detect_barcodes --barcode_kits ' + experiment.kit

    return ''


# Rule guppy_basecall runs the guppy basecaller.
rule guppy_basecall:
    input:
        EXP_DIR + "/{e}/origin.txt"
    output:
        EXP_DIR + "/{e}/guppy/sequencing_summary.txt"
    log:
        EXP_DIR + "/{e}/log/guppy.log"
    params:
        fc = lambda wilds: experiments[wilds.e].fc,
        kit = lambda wilds: experiments[wilds.e].kit,
        barcode_opts = lambda wilds: guppy_barcode_options(experiments[wilds.e]),
    threads:
        8
    resources:
        gpu=2,
        gpu_model="v100x",
        mem_mb=64*1024,
        runtime=10*24*60
    envmodules:
        "guppy/6.1.2"
    shell:
        """
        guppy_basecaller \
            -x cuda:all \
            --flowcell {params.fc} \
            --kit {params.kit} \
            --records_per_fastq 0 \
            --u_substitution off \
            --trim_strategy none \
            --input_path {EXP_DIR}/{wildcards.e}/runs/ \
            --save_path {EXP_DIR}/{wildcards.e}/guppy/ \
            --recursive \
            --gpu_runners_per_device 1 \
            --num_callers {threads} \
            --chunks_per_runner 512 \
            --compress_fastq \
            --max_queued_reads 20000 \
            {params.barcode_opts} \
            &> {log}
        """


# Rule merge_fastqs merges output fastqs from the basecalling step into a
# single file.
rule merge_fastqs:
    input:
        EXP_DIR + "/{expt}/guppy/sequencing_summary.txt",
    output:
        fastq = EXP_DIR + "/{expt}/guppy/reads.fastq.gz",
    shell:
        """
        find \
            {EXP_DIR}/{wildcards.expt}/guppy/pass/ \
            {EXP_DIR}/{wildcards.expt}/guppy/fail/ \
            -name "fastq_runid_*.fastq.gz" \
            -print0 \
        | while read -d $'\\0' FILE; do \
            cat $FILE >> {output.fastq};\
            done
        """


# Rule merge_fastqs merges output fastqs per barcode from the basecalling step
# into a single file.
rule merge_fastqs_per_barcode:
    input:
        EXP_DIR + "/{expt}/guppy/sequencing_summary.txt",
    output:
        fastq = EXP_DIR + "/{expt}/guppy/barcode/{b}/reads.fastq.gz",
    shell:
        """
        find \
            {EXP_DIR}/{wildcards.expt}/guppy/pass/barcode{wildcards.b}/ \
            {EXP_DIR}/{wildcards.expt}/guppy/fail/barcode{wildcards.b}/ \
            -name "fastq_runid_*.fastq.gz" \
            -print0 \
        | while read -d $'\\0' FILE; do \
            cat $FILE >> {output.fastq};\
            done
        """


# Rule merge_logs merges all logs from the basecalling step.
rule merge_logs:
    input:
        summ = EXP_DIR + "/{expt}/guppy/sequencing_summary.txt",
    output:
        glog = EXP_DIR + "/{expt}/guppy/guppy_basecaller.log.gz"
    shell:
        """
        find {EXP_DIR}/{wildcards.expt}/guppy/ \
            -name "guppy_basecaller_log-*.log" \
            -print0 \
        | while read -d $'\\0' FILE; do \
            cat $FILE | pigz -c >> {output.glog};\
            done
        """


# Rule clean_guppy_logs cleans all guppy output logs.
rule clean_guppy_logs:
    input:
        merged_log = EXP_DIR + "/{expt}/guppy/guppy_basecaller.log.gz",
    output:
        EXP_DIR + "/{expt}/guppy/clean_guppy_logs_done"
    shell:
        """
        find {EXP_DIR}/{wildcards.expt}/guppy/ \
            -name "guppy_basecaller_log-*.log" \
            -delete
        touch {output}
        """


# input_for_get_fastq_from_basecalling identifies and returns the directory path
# that contains the basecalled data for a sample. For barcoded samples the path
# contains two extra levels corresponding to the barcode.
def input_for_get_fastq_from_basecalling(wilds):
    s = samples[wilds.s]

    if s.is_barcoded():
        return os.path.join(
            EXP_DIR, s.parent_exp, "guppy", "barcode", s.barcode, "reads.fastq.gz")

    return os.path.join(
        EXP_DIR, s.parent_exp, "guppy", "reads.fastq.gz")


# Rule get_fastq_from_basecalling creates a symbolic link to the basecalled
# fastq file.
rule get_fastq_from_basecalling:
    input: input_for_get_fastq_from_basecalling
    output: SAMPLES_DIR + "/{s}/fastq/reads.fastq.gz"
    threads: 1
    shell:
        """
        mv {input} {output}
        """


# Rule sanitize_headers removes extraneous information from the fastq headers
# to save space in subsequent steps.
rule sanitize_headers:
    input:
        SAMPLES_DIR + "/{s}/fastq/reads.fastq.gz"

    output:
        SAMPLES_DIR + "/{s}/fastq/reads.sanitize.fastq.gz"
    threads: 12
    resources:
        mem_mb=2*1024,
        runtime=6*60
    shell:
        """
        zcat {input} \
            | {SCRIPTS_DIR}/fastq_sanitize_header.py --fastq - \
            | pigz \
            > {output}
        """


# pychopper_trim_orient_reads uses pychopper to identify and trim the ONT
# barcodes. It also orients the reads 5' to 3'. This is only used for the cDNA
# protocol.
rule pychopper_trim_orient_reads:
    input:
        SAMPLES_DIR + "/{s}/fastq/{prefix}.fastq.gz"
    output:
        report = SAMPLES_DIR + "/{s}/fastq/{prefix}.pychop.report.pdf",
        rescued = SAMPLES_DIR + "/{s}/fastq/{prefix}.pychop.rescued.fastq.gz",
        unclass = SAMPLES_DIR + "/{s}/fastq/{prefix}.pychop.unclass.fastq.gz",
        trimmed = SAMPLES_DIR + "/{s}/fastq/{prefix}.pychop.trimmed.fastq.gz",
    threads: 8
    resources:
        mem_mb=50*1024,
        runtime=1*24*60,
        disk_mb=200*1024
    envmodules:
        "pychopper/2.7.1"
    shell:
        """
        pigz -p {threads} -d -c {input} \
            > $TMPDIR/input.fastq

        pychopper \
            -r {output.report} \
            -k PCS111 \
            -t {threads} \
            -u >(gzip -c > {output.unclass}) \
            -w >(gzip -c > {output.rescued}) \
            $TMPDIR/input.fastq \
            - \
            | gzip -c > {output.trimmed}
        """


# pychopper_trim_orient_reads uses pychopper to identify and trim the ONT
# barcodes. It also orients the reads 5' to 3'. This is only used for the cDNA
# protocol.
rule pychopper_merge_trimmed_rescued:
    input:
        rescued = SAMPLES_DIR + "/{s}/fastq/{prefix}.pychop.rescued.fastq.gz",
        trimmed = SAMPLES_DIR + "/{s}/fastq/{prefix}.pychop.trimmed.fastq.gz",
    output:
        SAMPLES_DIR + "/{s}/fastq/{prefix}.pychopped.fastq.gz",
    threads: 2
    resources:
        mem_mb=2*1024,
        runtime=24*60
    shell:
        """
        cat {input.trimmed} {input.rescued} > {output}
        """


# input_for_alignment rules identifies and returns the input fastq file for
# the alignment step. For unstranded samples the file will pass through
# pychopper to orient and remove adapters.
def input_for_alignment_rules(sample, fastq_prefix):
    s = sample

    if s.is_unstranded():
        return os.path.join(
            SAMPLES_DIR, s.name, "fastq", fastq_prefix + ".pychopped.fastq.gz")

    return os.path.join(
        SAMPLES_DIR, s.name, "fastq", fastq_prefix + ".fastq.gz")


# align_reads_to_genome aligns the input reads to the genome.
rule align_reads_to_genome:
    input:
        lambda ws: input_for_alignment_rules(samples[ws.sample], ws.prefix)
    output:
        SAMPLES_DIR + "/{sample}/align/{prefix}.toGenome.bam"
    threads: 50
    resources:
        mem_mb=100*1024,
        runtime=2*24*60
    conda:
        "envs/minimap2.yml"
    envmodules:
        "samtools/1.15.1",
        "minimap2/2.24"
    shell:
        """
        minimap2 \
                -a \
                -x splice \
                -k 12 \
                -u b \
                --MD \
                --sam-hit-only \
                --junc-bed {DATA_DIR}/{ASSEMBLY}/junctions.bed  \
                -t {threads} \
                --secondary=no \
                {DATA_DIR}/{ASSEMBLY}/genome/genome.fa \
                {input} \
                    | grep -v "SA:Z:" \
                    | samtools view -b -F 256 - \
                    > {output}
        """


# align_reads_to_transcriptome: aligns the input reads to the transcriptome.
rule align_reads_to_transcriptome:
    input:
        lambda ws: input_for_alignment_rules(samples[ws.sample], ws.prefix)
    output:
        SAMPLES_DIR + "/{sample}/align/{prefix}.toTranscriptome.bam"
    threads: 50
    resources:
        mem_mb=100*1024,
        runtime=2*24*60
    conda:
        "envs/minimap2.yml"
    envmodules:
        "samtools/1.15.1",
        "minimap2/2.24"
    shell:
        """
        minimap2 \
                -a \
                -x map-ont \
                -k 12 \
                -u f \
                -t {threads} \
                --secondary=no \
                {DATA_DIR}/{ASSEMBLY}/transcripts.fa \
                {input} \
                    | grep -v "SA:Z:" \
                    | samtools view -b -F 256 - \
                    > {output}
        """


# align_reads_to_ebola_genome aligns the input reads to the ebola genome.
rule align_reads_to_ebola_genome:
    input:
        lambda ws: input_for_alignment_rules(samples[ws.sample], ws.prefix)
    output:
        SAMPLES_DIR + "/{sample}/align/{prefix}.toEbolaGenome.bam"
    threads: 50
    resources:
        mem_mb=100*1024,
        runtime=2*24*60
    conda:
        "envs/minimap2.yml"
    envmodules:
        "samtools/1.15.1",
        "minimap2/2.24"
    shell:
        """
        minimap2 \
                -a \
                -x splice \
                -k 12 \
                -u b \
                --MD \
                --sam-hit-only \
                -t {threads} \
                --secondary=no \
                {DATA_DIR}/ebola/EBOV_mayinga.fa \
                {input} \
                    | grep -v "SA:Z:" \
                    | samtools view -b -F 256 - \
                    > {output}
        """


# align_reads_to_UCSC_genome aligns the input reads to the UCSC genome.
rule align_reads_to_UCSC_genome:
    input:
        lambda ws: input_for_alignment_rules(samples[ws.sample], ws.prefix)
    output:
        SAMPLES_DIR + "/{sample}/align/{prefix}.toUCSCGenome.bam"
    threads: 50
    resources:
        mem_mb=100*1024,
        runtime=2*24*60
    conda:
        "envs/minimap2.yml"
    envmodules:
        "samtools/1.15.1",
        "minimap2/2.24"
    shell:
        """
        minimap2 \
                -a \
                -x splice \
                -k 14 \
                -u b \
                --MD \
                --sam-hit-only \
                -t {threads} \
                --secondary=no \
                {DATA_DIR}/{ASSEMBLY}/ucsc/genome.fa \
                {input} \
                    | grep -v "SA:Z:" \
                    | samtools view -b -F 256 - \
                    > {output}
        """


# sort_bam sorts a bam file.
rule sort_bam:
    input:
        SAMPLES_DIR + "/{sample}/align/{filename}.bam",
    output:
        SAMPLES_DIR + "/{sample}/align/{filename}.sorted.bam",
    threads: 20
    resources:
        mem_mb=30*1024,
        runtime=2*60,
        disk_mb=100*1024,
    conda:
        "envs/minimap2.yml"
    envmodules:
        "samtools/1.15.1",
    shell:
        """
            samtools sort \
                --threads {threads} \
                -T /lscratch/$SLURM_JOB_ID \
                -o {output} \
                {input}
        """


# index_bam indexes a bam file
rule index_bam:
    input:
        SAMPLES_DIR + "/{sample}/align/{filename}.bam",
    output:
        SAMPLES_DIR + "/{sample}/align/{filename}.bam.bai",
    threads: 40
    resources:
        mem_mb=5*1024,
        runtime=5*60
    envmodules:
        "samtools/1.15.1"
    shell:
        """
        samtools index -@ {threads} {input}
        """


# symlink_alignments_for_igv creates symbolic links for bam files to be used
# with IGV. The links contain the sample name in the filename to simplify
# loading in IGV.
rule symlink_alignments_for_igv:
    input:
        SAMPLES_DIR + "/{sample}/align/{filename}",
    output:
        "igv/align/{sample}-{filename}",
    threads: 1
    shell:
        """
        ln -sf ../../{input} {output}
        """


# bamfile_flagstats outputs alignment statistics for alignments.
rule bamfile_flagstats:
    input:
        SAMPLES_DIR + "/{sample}/align/{filename}.bam",
    output:
        SAMPLES_DIR + "/{sample}/align/{filename}.bam.flagstats.txt",
    threads: 4
    resources:
        mem_mb=5*1024,
        runtime=3*60
    envmodules:
        "samtools/1.15.1"
    shell:
        """
        samtools flagstat -O tsv --threads {threads} {input} > {output}
        """


# count_aligned_reads_per_transcript counts the reads aligned on each
# transcript.
rule count_aligned_reads_per_transcript:
    input:
        SAMPLES_DIR + "/{s}/align/{prefix}.toTranscriptome.sorted.bam",
    output:
        ANALYSIS_DIR + "/counts/results/{s}/{prefix}.toTranscriptome.counts.txt"
    conda:
        "envs/bam.yml"
    shell:
        """
        {SCRIPTS_DIR}/sam_per_ref_count_statistics.py \
            --ifile {input} \
            --ref-col-name transcript \
            --cnt-col-name count \
            --opt-col-name sample \
            --opt-col-val {wildcards.s} \
            | table-join.py \
                --table1 - \
                --table2 {DATA_DIR}/{ASSEMBLY}/transcript-gene.tab \
                --key1 transcript \
                --key2 transcript \
                > {output}
        """


# fastqc_fastq runs fastqc for a fastq file
rule fastqc_fastq:
    input:
        SAMPLES_DIR + "/{s}/fastq/{prefix}.fastq.gz",
    output:
        SAMPLES_DIR + "/{s}/qc/{prefix}_fastqc.html",
    params:
        outdir = lambda wilds, output: os.path.dirname(output[0]),
        dummy_threads = 20
    threads: 2
    resources:
        mem_mb=int(20*250*1.5), # dummy_threads * 250M(see below) + 50% extra
        runtime=24*60
    envmodules:
        "fastqc/0.11.9"
    shell:
        """
            # Memory limit for FastQC is defined as threads*250M. Although
            # it's not parallelized, below we use -t dummy_threads to
            # indirectly increase the memory limit.
            fastqc \
                -o {params.outdir} \
                -t {params.dummy_threads} \
                {input}
        """


# copy_fastqs_to_share copies fastq files to a directory and names them
# according to sample to be used for sharing.
rule copy_bams_to_share:
    input:
        SAMPLES_DIR + "/{sample}/align/{filename}",
    output:
        "share/{sample}-{filename}",
    threads: 1
    shell:
        """
        cp -L {input} {output}
        """


# copy_fastqs_to_share copies fastq files to a directory and names them
# according to sample to be used for sharing.
rule copy_fastqs_to_share:
    input:
        SAMPLES_DIR + "/{sample}/fastq/{filename}.fastq.gz",
    output:
        "share/{sample}-{filename}.fastq.gz",
    threads: 1
    shell:
        """
        cp -L {input} {output}
        """
